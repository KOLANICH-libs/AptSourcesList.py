# Generated from grammar.g4 by ANTLR 4.11.2-SNAPSHOT
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,278,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,50,8,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,
        232,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,4,3,242,8,3,11,3,12,3,243,
        1,4,4,4,247,8,4,11,4,12,4,248,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
        9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,1,0,4,2,0,9,13,32,32,1,0,46,47,4,0,48,57,65,90,95,95,97,122,
        10,0,0,8,14,31,33,33,36,38,40,42,59,60,62,64,94,94,96,96,123,255,
        295,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,49,1,0,0,0,
        3,231,1,0,0,0,5,233,1,0,0,0,7,241,1,0,0,0,9,246,1,0,0,0,11,250,1,
        0,0,0,13,252,1,0,0,0,15,254,1,0,0,0,17,256,1,0,0,0,19,258,1,0,0,
        0,21,260,1,0,0,0,23,262,1,0,0,0,25,264,1,0,0,0,27,266,1,0,0,0,29,
        268,1,0,0,0,31,270,1,0,0,0,33,272,1,0,0,0,35,274,1,0,0,0,37,276,
        1,0,0,0,39,40,5,100,0,0,40,41,5,101,0,0,41,50,5,98,0,0,42,43,5,100,
        0,0,43,44,5,101,0,0,44,45,5,98,0,0,45,46,5,45,0,0,46,47,5,115,0,
        0,47,48,5,114,0,0,48,50,5,99,0,0,49,39,1,0,0,0,49,42,1,0,0,0,50,
        2,1,0,0,0,51,52,5,97,0,0,52,53,5,114,0,0,53,54,5,99,0,0,54,232,5,
        104,0,0,55,56,5,108,0,0,56,57,5,97,0,0,57,58,5,110,0,0,58,232,5,
        103,0,0,59,60,5,116,0,0,60,61,5,97,0,0,61,62,5,114,0,0,62,63,5,103,
        0,0,63,64,5,101,0,0,64,232,5,116,0,0,65,66,5,112,0,0,66,67,5,100,
        0,0,67,68,5,105,0,0,68,69,5,102,0,0,69,70,5,102,0,0,70,232,5,115,
        0,0,71,72,5,98,0,0,72,73,5,121,0,0,73,74,5,45,0,0,74,75,5,104,0,
        0,75,76,5,97,0,0,76,77,5,115,0,0,77,232,5,104,0,0,78,79,5,118,0,
        0,79,80,5,97,0,0,80,81,5,108,0,0,81,82,5,105,0,0,82,83,5,100,0,0,
        83,84,5,45,0,0,84,85,5,117,0,0,85,86,5,110,0,0,86,87,5,116,0,0,87,
        88,5,105,0,0,88,89,5,108,0,0,89,90,5,45,0,0,90,91,5,109,0,0,91,92,
        5,97,0,0,92,232,5,120,0,0,93,94,5,97,0,0,94,95,5,108,0,0,95,96,5,
        108,0,0,96,97,5,111,0,0,97,98,5,119,0,0,98,99,5,45,0,0,99,100,5,
        100,0,0,100,101,5,111,0,0,101,102,5,119,0,0,102,103,5,110,0,0,103,
        104,5,103,0,0,104,105,5,114,0,0,105,106,5,97,0,0,106,107,5,100,0,
        0,107,108,5,101,0,0,108,109,5,45,0,0,109,110,5,116,0,0,110,111,5,
        111,0,0,111,112,5,45,0,0,112,113,5,105,0,0,113,114,5,110,0,0,114,
        115,5,115,0,0,115,116,5,101,0,0,116,117,5,99,0,0,117,118,5,117,0,
        0,118,119,5,114,0,0,119,232,5,101,0,0,120,121,5,97,0,0,121,122,5,
        108,0,0,122,123,5,108,0,0,123,124,5,111,0,0,124,125,5,119,0,0,125,
        126,5,45,0,0,126,127,5,119,0,0,127,128,5,101,0,0,128,129,5,97,0,
        0,129,232,5,107,0,0,130,131,5,97,0,0,131,132,5,108,0,0,132,133,5,
        108,0,0,133,134,5,111,0,0,134,135,5,119,0,0,135,136,5,45,0,0,136,
        137,5,105,0,0,137,138,5,110,0,0,138,139,5,115,0,0,139,140,5,101,
        0,0,140,141,5,99,0,0,141,142,5,117,0,0,142,143,5,114,0,0,143,232,
        5,101,0,0,144,145,5,116,0,0,145,146,5,114,0,0,146,147,5,117,0,0,
        147,148,5,115,0,0,148,149,5,116,0,0,149,150,5,101,0,0,150,232,5,
        100,0,0,151,152,5,115,0,0,152,153,5,105,0,0,153,154,5,103,0,0,154,
        155,5,110,0,0,155,156,5,101,0,0,156,157,5,100,0,0,157,158,5,45,0,
        0,158,159,5,98,0,0,159,232,5,121,0,0,160,161,5,99,0,0,161,162,5,
        104,0,0,162,163,5,101,0,0,163,164,5,99,0,0,164,165,5,107,0,0,165,
        166,5,45,0,0,166,167,5,118,0,0,167,168,5,97,0,0,168,169,5,108,0,
        0,169,170,5,105,0,0,170,171,5,100,0,0,171,172,5,45,0,0,172,173,5,
        117,0,0,173,174,5,110,0,0,174,175,5,116,0,0,175,176,5,105,0,0,176,
        232,5,108,0,0,177,178,5,118,0,0,178,179,5,97,0,0,179,180,5,108,0,
        0,180,181,5,105,0,0,181,182,5,100,0,0,182,183,5,45,0,0,183,184,5,
        117,0,0,184,185,5,110,0,0,185,186,5,116,0,0,186,187,5,105,0,0,187,
        188,5,108,0,0,188,189,5,45,0,0,189,190,5,109,0,0,190,191,5,105,0,
        0,191,232,5,110,0,0,192,193,5,99,0,0,193,194,5,104,0,0,194,195,5,
        101,0,0,195,196,5,99,0,0,196,197,5,107,0,0,197,198,5,45,0,0,198,
        199,5,100,0,0,199,200,5,97,0,0,200,201,5,116,0,0,201,232,5,101,0,
        0,202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,114,0,0,205,206,
        5,101,0,0,206,207,5,108,0,0,207,208,5,101,0,0,208,209,5,97,0,0,209,
        210,5,115,0,0,210,211,5,101,0,0,211,212,5,45,0,0,212,213,5,112,0,
        0,213,214,5,97,0,0,214,215,5,116,0,0,215,232,5,104,0,0,216,217,5,
        100,0,0,217,218,5,97,0,0,218,219,5,116,0,0,219,220,5,101,0,0,220,
        221,5,45,0,0,221,222,5,109,0,0,222,223,5,97,0,0,223,224,5,120,0,
        0,224,225,5,45,0,0,225,226,5,102,0,0,226,227,5,117,0,0,227,228,5,
        116,0,0,228,229,5,117,0,0,229,230,5,114,0,0,230,232,5,101,0,0,231,
        51,1,0,0,0,231,55,1,0,0,0,231,59,1,0,0,0,231,65,1,0,0,0,231,71,1,
        0,0,0,231,78,1,0,0,0,231,93,1,0,0,0,231,120,1,0,0,0,231,130,1,0,
        0,0,231,144,1,0,0,0,231,151,1,0,0,0,231,160,1,0,0,0,231,177,1,0,
        0,0,231,192,1,0,0,0,231,202,1,0,0,0,231,216,1,0,0,0,232,4,1,0,0,
        0,233,234,5,99,0,0,234,235,5,100,0,0,235,236,5,114,0,0,236,237,5,
        111,0,0,237,238,5,109,0,0,238,239,5,58,0,0,239,6,1,0,0,0,240,242,
        3,35,17,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,
        1,0,0,0,244,8,1,0,0,0,245,247,3,11,5,0,246,245,1,0,0,0,247,248,1,
        0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,10,1,0,0,0,250,251,7,0,
        0,0,251,12,1,0,0,0,252,253,7,1,0,0,253,14,1,0,0,0,254,255,5,91,0,
        0,255,16,1,0,0,0,256,257,5,93,0,0,257,18,1,0,0,0,258,259,5,61,0,
        0,259,20,1,0,0,0,260,261,5,35,0,0,261,22,1,0,0,0,262,263,5,43,0,
        0,263,24,1,0,0,0,264,265,5,58,0,0,265,26,1,0,0,0,266,267,5,44,0,
        0,267,28,1,0,0,0,268,269,5,45,0,0,269,30,1,0,0,0,270,271,5,39,0,
        0,271,32,1,0,0,0,272,273,5,34,0,0,273,34,1,0,0,0,274,275,7,2,0,0,
        275,36,1,0,0,0,276,277,7,3,0,0,277,38,1,0,0,0,5,0,49,231,243,248,
        0
    ]

class apt_sourceLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TypeR = 1
    OptionName = 2
    CdromSchema = 3
    Word = 4
    WSS = 5
    WS = 6
    PunctuationAllowedInOptionValue = 7
    OptionsStart = 8
    OptionsEnd = 9
    OptionNameValueSeparator = 10
    CommentMarker = 11
    Plus = 12
    Colon = 13
    OptionsSeparator = 14
    Dash = 15
    SingleTick = 16
    DoubleTick = 17
    WordChar = 18
    NonWhitespaceNonOptionValueNonSquareRightBracketNonEq = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'cdrom:'", "'['", "']'", "'='", "'#'", "'+'", "':'", "','", 
            "'-'", "'''", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "TypeR", "OptionName", "CdromSchema", "Word", "WSS", "WS", "PunctuationAllowedInOptionValue", 
            "OptionsStart", "OptionsEnd", "OptionNameValueSeparator", "CommentMarker", 
            "Plus", "Colon", "OptionsSeparator", "Dash", "SingleTick", "DoubleTick", 
            "WordChar", "NonWhitespaceNonOptionValueNonSquareRightBracketNonEq" ]

    ruleNames = [ "TypeR", "OptionName", "CdromSchema", "Word", "WSS", "WS", 
                  "PunctuationAllowedInOptionValue", "OptionsStart", "OptionsEnd", 
                  "OptionNameValueSeparator", "CommentMarker", "Plus", "Colon", 
                  "OptionsSeparator", "Dash", "SingleTick", "DoubleTick", 
                  "WordChar", "NonWhitespaceNonOptionValueNonSquareRightBracketNonEq" ]

    grammarFileName = "grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.2-SNAPSHOT")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


